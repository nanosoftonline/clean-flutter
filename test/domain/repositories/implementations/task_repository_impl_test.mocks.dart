// Mocks generated by Mockito 5.3.2 from annotations
// in crm/test/domain/repositories/implementations/task_repository_impl_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i5;

import 'package:crm/data/data_sources/interfaces/task_datasource.dart' as _i4;
import 'package:crm/data/entities/task_entity.dart' as _i2;
import 'package:crm/domain/model/customer.dart' as _i6;
import 'package:crm/domain/model/task.dart' as _i7;
import 'package:dartz/dartz.dart' as _i3;
import 'package:mockito/mockito.dart' as _i1;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeTaskEntity_0 extends _i1.SmartFake implements _i2.TaskEntity {
  _FakeTaskEntity_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeUnit_1 extends _i1.SmartFake implements _i3.Unit {
  _FakeUnit_1(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [TaskDataSource].
///
/// See the documentation for Mockito's code generation for more information.
class MockTaskDataSource extends _i1.Mock implements _i4.TaskDataSource {
  MockTaskDataSource() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i5.Future<List<_i2.TaskEntity>> find({
    _i6.Customer? customer,
    _i7.Priority? priority,
    String? subject,
    _i7.Status? status,
    DateTime? dueDate,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #find,
          [],
          {
            #customer: customer,
            #priority: priority,
            #subject: subject,
            #status: status,
            #dueDate: dueDate,
          },
        ),
        returnValue: _i5.Future<List<_i2.TaskEntity>>.value(<_i2.TaskEntity>[]),
      ) as _i5.Future<List<_i2.TaskEntity>>);
  @override
  _i5.Future<_i2.TaskEntity> findOne(String? id) => (super.noSuchMethod(
        Invocation.method(
          #findOne,
          [id],
        ),
        returnValue: _i5.Future<_i2.TaskEntity>.value(_FakeTaskEntity_0(
          this,
          Invocation.method(
            #findOne,
            [id],
          ),
        )),
      ) as _i5.Future<_i2.TaskEntity>);
  @override
  _i5.Future<_i3.Unit> create(_i2.TaskEntity? task) => (super.noSuchMethod(
        Invocation.method(
          #create,
          [task],
        ),
        returnValue: _i5.Future<_i3.Unit>.value(_FakeUnit_1(
          this,
          Invocation.method(
            #create,
            [task],
          ),
        )),
      ) as _i5.Future<_i3.Unit>);
  @override
  _i5.Future<_i3.Unit> delete(String? id) => (super.noSuchMethod(
        Invocation.method(
          #delete,
          [id],
        ),
        returnValue: _i5.Future<_i3.Unit>.value(_FakeUnit_1(
          this,
          Invocation.method(
            #delete,
            [id],
          ),
        )),
      ) as _i5.Future<_i3.Unit>);
  @override
  _i5.Future<_i3.Unit> update(
    String? id, {
    _i6.Customer? customer,
    _i7.Priority? priority,
    String? subject,
    _i7.Status? status,
    DateTime? dueDate,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #update,
          [id],
          {
            #customer: customer,
            #priority: priority,
            #subject: subject,
            #status: status,
            #dueDate: dueDate,
          },
        ),
        returnValue: _i5.Future<_i3.Unit>.value(_FakeUnit_1(
          this,
          Invocation.method(
            #update,
            [id],
            {
              #customer: customer,
              #priority: priority,
              #subject: subject,
              #status: status,
              #dueDate: dueDate,
            },
          ),
        )),
      ) as _i5.Future<_i3.Unit>);
}
